"""empty message

Revision ID: d3cfabeea76f
Revises: 3184f1789ce3
Create Date: 2024-04-12 19:53:07.993534

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd3cfabeea76f'
down_revision = '3184f1789ce3'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('active_collector',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('collector_id', sa.BigInteger(), nullable=False),
    sa.Column('account_id', sa.String(), nullable=False),
    sa.CheckConstraint("account_id != ''"),
    sa.PrimaryKeyConstraint('debtor_id', 'collector_id'),
    comment='Represents an active Swaptacular account which can be used to collect and dispatch transfers. Each "Worker" servers will maintain its own copy of this table (that is: no rows-sharding) by periodically copying the relevant records from the solver\'s "collector_account" table. "Worker" servers will use this local copy so as to avoid querying the central database too often.'
    )
    op.create_table('candidate_offer_signal',
    sa.Column('turn_id', sa.SmallInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('account_creation_date', sa.DATE(), nullable=False),
    sa.Column('last_transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('turn_id', 'debtor_id', 'creditor_id')
    )
    op.create_table('needed_collector_signal',
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('signal_id')
    )
    op.create_table('recently_needed_collector',
    sa.Column('debtor_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('needed_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('debtor_id != 0'),
    sa.PrimaryKeyConstraint('debtor_id'),
    comment='Indicates that the creation of a collector account for the currency with the given debtor ID has been recently requested. This information is used to prevent "worker" servers from making repetitive queries to the central database.'
    )
    op.create_table('worker_turn',
    sa.Column('turn_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('started_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('base_debtor_info_locator', sa.String(), nullable=False),
    sa.Column('base_debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('max_distance_to_base', sa.SmallInteger(), nullable=False),
    sa.Column('min_trade_amount', sa.BigInteger(), nullable=False),
    sa.Column('phase', sa.SmallInteger(), nullable=False),
    sa.Column('phase_deadline', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('collection_started_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('collection_deadline', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('worker_turn_subphase', sa.SmallInteger(), nullable=False, comment='The worker may divide the processing of each phase to one more sub-phases. The initial sub-phase is always `0`, and the final sub-phase is always `10`. Sequential sub-phases do not need to be (and normally will not be) represented by sequential numbers. This gives the freedom to add sub-phases if necessary.'),
    sa.CheckConstraint('base_debtor_id != 0'),
    sa.CheckConstraint('max_distance_to_base > 0'),
    sa.CheckConstraint('min_trade_amount > 0'),
    sa.CheckConstraint('phase < 2 OR collection_deadline IS NOT NULL'),
    sa.CheckConstraint('phase < 3 OR collection_started_at IS NOT NULL'),
    sa.CheckConstraint('phase > 0 AND phase <= 3'),
    sa.CheckConstraint('phase > 2 OR phase_deadline IS NOT NULL'),
    sa.CheckConstraint('worker_turn_subphase >= 0 AND worker_turn_subphase <= 10'),
    sa.PrimaryKeyConstraint('turn_id'),
    comment='Represents a circular trading round in which a "worker" server participates. "Worker" servers will watch for new and changed rows in the solver\'s `turn` table, and will copy them off.'
    )
    with op.batch_alter_table('worker_turn', schema=None) as batch_op:
        batch_op.create_index('idx_worker_turn_subphase', ['worker_turn_subphase'], unique=False, postgresql_where=sa.text('worker_turn_subphase < 10'))

    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('worker_turn', schema=None) as batch_op:
        batch_op.drop_index('idx_worker_turn_subphase', postgresql_where=sa.text('worker_turn_subphase < 10'))

    op.drop_table('worker_turn')
    op.drop_table('recently_needed_collector')
    op.drop_table('needed_collector_signal')
    op.drop_table('candidate_offer_signal')
    op.drop_table('active_collector')
    # ### end Alembic commands ###


def upgrade_solver():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_solver():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

