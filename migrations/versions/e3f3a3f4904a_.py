"""empty message

Revision ID: e3f3a3f4904a
Revises: 
Create Date: 2024-01-25 17:33:49.882236

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'e3f3a3f4904a'
down_revision = None
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('configure_account_signal',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('seqnum', sa.Integer(), nullable=False),
    sa.Column('negligible_amount', sa.REAL(), nullable=False),
    sa.Column('config_data', sa.String(), nullable=False),
    sa.Column('config_flags', sa.Integer(), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id', 'ts', 'seqnum')
    )
    op.create_table('finalize_transfer_signal',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('committed_amount', sa.BigInteger(), nullable=False),
    sa.Column('transfer_note_format', sa.String(), nullable=False),
    sa.Column('transfer_note', sa.String(), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('creditor_id', 'signal_id')
    )
    op.create_table('prepare_transfer_signal',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('recipient', sa.String(), nullable=False),
    sa.Column('locked_amount', sa.BigInteger(), nullable=False),
    sa.Column('min_interest_rate', sa.Float(), nullable=False),
    sa.Column('max_commit_delay', sa.Integer(), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('creditor_id', 'coordinator_request_id')
    )
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('prepare_transfer_signal')
    op.drop_table('finalize_transfer_signal')
    op.drop_table('configure_account_signal')
    # ### end Alembic commands ###


def upgrade_solver():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('buy_offer',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.PrimaryKeyConstraint('turn_id', 'creditor_id', 'debtor_id')
    )
    op.create_table('collector_account',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('collector_id', sa.BigInteger(), nullable=False),
    sa.Column('account_id', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'collector_id')
    )
    op.create_table('collector_collecting',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('collector_id', sa.BigInteger(), nullable=False),
    sa.Column('collector_hash', sa.SmallInteger(), nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.PrimaryKeyConstraint('turn_id', 'debtor_id', 'creditor_id')
    )
    op.create_table('collector_receiving',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('to_collector_id', sa.BigInteger(), nullable=False),
    sa.Column('from_collector_id', sa.BigInteger(), nullable=False),
    sa.Column('to_collector_hash', sa.SmallInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.PrimaryKeyConstraint('turn_id', 'debtor_id', 'to_collector_id', 'from_collector_id')
    )
    op.create_table('collector_sending',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('from_collector_id', sa.BigInteger(), nullable=False),
    sa.Column('to_collector_id', sa.BigInteger(), nullable=False),
    sa.Column('from_collector_hash', sa.SmallInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.PrimaryKeyConstraint('turn_id', 'debtor_id', 'from_collector_id', 'to_collector_id')
    )
    op.create_table('confirmed_debtor',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_info_locator', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('turn_id', 'debtor_id')
    )
    op.create_table('creditor_collecting',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_hash', sa.SmallInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('collector_id', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.PrimaryKeyConstraint('turn_id', 'creditor_id', 'debtor_id')
    )
    op.create_table('creditor_giving',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_hash', sa.SmallInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('collector_id', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.PrimaryKeyConstraint('turn_id', 'creditor_id', 'debtor_id')
    )
    op.create_table('creditor_taking',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_hash', sa.SmallInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('collector_id', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.PrimaryKeyConstraint('turn_id', 'creditor_id', 'debtor_id')
    )
    op.create_table('currency_info',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('debtor_info_locator', sa.String(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('peg_debtor_info_locator', sa.String(), nullable=True),
    sa.Column('peg_debtor_id', sa.BigInteger(), nullable=True),
    sa.Column('peg_exchange_rate', sa.FLOAT(), nullable=True),
    sa.Column('is_confirmed', sa.BOOLEAN(), nullable=False),
    sa.PrimaryKeyConstraint('turn_id', 'debtor_info_locator')
    )
    with op.batch_alter_table('currency_info', schema=None) as batch_op:
        batch_op.create_index('idx_confirmed_debtor_id', ['turn_id', 'debtor_id'], unique=True, postgresql_where=sa.text('is_confirmed'))

    op.create_table('debtor_info',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('debtor_info_locator', sa.String(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('peg_debtor_info_locator', sa.String(), nullable=True),
    sa.Column('peg_debtor_id', sa.BigInteger(), nullable=True),
    sa.Column('peg_exchange_rate', sa.FLOAT(), nullable=True),
    sa.PrimaryKeyConstraint('turn_id', 'debtor_info_locator')
    )
    op.create_table('sell_offer',
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('collector_id', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.PrimaryKeyConstraint('turn_id', 'creditor_id', 'debtor_id')
    )
    op.create_table('turn',
    sa.Column('turn_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('started_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('base_debtor_info_locator', sa.String(), nullable=False),
    sa.Column('base_debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('max_distance_to_base', sa.SmallInteger(), nullable=False),
    sa.Column('min_trade_amount', sa.BigInteger(), nullable=False),
    sa.Column('phase', sa.SmallInteger(), nullable=False, comment="Turn's phase: 1) gathering currencies info; 2) gathering buy and sell offers; 3) giving and taking; 4) done."),
    sa.Column('phase_deadline', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('collection_started_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('collection_deadline', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.CheckConstraint('(phase < 2 OR collection_deadline IS NOT NULL) AND (phase < 3 OR collection_started_at IS NOT NULL)'),
    sa.CheckConstraint('base_debtor_id != 0'),
    sa.CheckConstraint('max_distance_to_base > 0'),
    sa.CheckConstraint('min_trade_amount > 0'),
    sa.CheckConstraint('phase > 0 AND phase <= 4'),
    sa.CheckConstraint('phase > 2 OR phase_deadline IS NOT NULL'),
    sa.PrimaryKeyConstraint('turn_id')
    )
    with op.batch_alter_table('turn', schema=None) as batch_op:
        batch_op.create_index('idx_phase', ['phase'], unique=False, postgresql_where=sa.text('phase < 4'))
        batch_op.create_index('idx_started_at', ['started_at'], unique=False)

    # ### end Alembic commands ###


def downgrade_solver():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('turn', schema=None) as batch_op:
        batch_op.drop_index('idx_started_at')
        batch_op.drop_index('idx_phase', postgresql_where=sa.text('phase < 4'))

    op.drop_table('turn')
    op.drop_table('sell_offer')
    op.drop_table('debtor_info')
    with op.batch_alter_table('currency_info', schema=None) as batch_op:
        batch_op.drop_index('idx_confirmed_debtor_id', postgresql_where=sa.text('is_confirmed'))

    op.drop_table('currency_info')
    op.drop_table('creditor_taking')
    op.drop_table('creditor_giving')
    op.drop_table('creditor_collecting')
    op.drop_table('confirmed_debtor')
    op.drop_table('collector_sending')
    op.drop_table('collector_receiving')
    op.drop_table('collector_collecting')
    op.drop_table('collector_account')
    op.drop_table('buy_offer')
    # ### end Alembic commands ###

