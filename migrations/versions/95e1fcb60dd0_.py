"""empty message

Revision ID: 95e1fcb60dd0
Revises: c442e0862585
Create Date: 2024-06-13 20:04:34.101100

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '95e1fcb60dd0'
down_revision = 'c442e0862585'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account_id_request_signal',
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('collector_id', sa.BigInteger(), nullable=False),
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('is_dispatching', sa.BOOLEAN(), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('signal_id')
    )
    op.create_table('account_id_response_signal',
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('collector_id', sa.BigInteger(), nullable=False),
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('is_dispatching', sa.BOOLEAN(), nullable=False),
    sa.Column('account_id', sa.String(), nullable=False),
    sa.Column('account_id_version', sa.BigInteger(), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('signal_id')
    )
    op.create_table('transfer_attempt',
    sa.Column('collector_id', sa.BigInteger(), nullable=False, comment='This is the creditor ID of the sender.'),
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False, comment='This is the creditor ID of the recipient.'),
    sa.Column('is_dispatching', sa.BOOLEAN(), nullable=False, comment='Will be TRUE when the collector is dispatching some amount to a buyer, and FALSE when the collector is sending some amount to another collector.'),
    sa.Column('nominal_amount', sa.FLOAT(), nullable=False),
    sa.Column('collection_started_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('recipient', sa.String(), nullable=False),
    sa.Column('recipient_version', sa.BigInteger(), nullable=False, comment='In very rare cases the recipient may be change. This column allows us to tell which recipient value is newer.'),
    sa.Column('rescheduled_for', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('attempted_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='The timestamp of the sent `PrepareTransfer` SMP message.'),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=True),
    sa.Column('final_interest_rate_ts', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('amount', sa.BigInteger(), nullable=True),
    sa.Column('transfer_id', sa.BigInteger(), nullable=True),
    sa.Column('finalized_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('failure_code', sa.SmallInteger(), nullable=True, comment='Failure codes: 0) An unspecified failure; 1) TIMEOUT; 2) NEWER_INTEREST_RATE; 3) RECIPIENT_IS_UNREACHABLE; 4) INSUFFICIENT_AVAILABLE_AMOUNT.'),
    sa.Column('failed_attempts', sa.Integer(), nullable=False),
    sa.Column('fatal_error', sa.String(), nullable=True),
    sa.CheckConstraint("attempted_at IS NULL AND coordinator_request_id IS NULL AND final_interest_rate_ts IS NULL AND amount IS NULL OR attempted_at IS NOT NULL AND coordinator_request_id IS NOT NULL AND final_interest_rate_ts IS NOT NULL AND amount IS NOT NULL AND recipient != ''"),
    sa.CheckConstraint('amount > 0'),
    sa.CheckConstraint('failed_attempts >= 0'),
    sa.CheckConstraint('failure_code IS NULL OR attempted_at IS NOT NULL'),
    sa.CheckConstraint('fatal_error IS NULL OR failure_code = 0 AND rescheduled_for IS NULL'),
    sa.CheckConstraint('finalized_at IS NULL OR transfer_id IS NOT NULL'),
    sa.CheckConstraint('nominal_amount >= 2.0'),
    sa.CheckConstraint('rescheduled_for IS NULL OR failure_code IS NOT NULL'),
    sa.CheckConstraint('transfer_id IS NULL OR coordinator_request_id IS NOT NULL'),
    sa.PrimaryKeyConstraint('collector_id', 'turn_id', 'debtor_id', 'creditor_id', 'is_dispatching'),
    comment="Represents a past or future attempt to transfer some amount form a given collector's account to another account, as a part of a given trading turn. More than one attempt may be made if the first attempt has failed."
    )
    with op.batch_alter_table('transfer_attempt', schema=None) as batch_op:
        batch_op.create_index('idx_transfer_coordinator_request_id', ['coordinator_request_id'], unique=True, postgresql_where=sa.text('coordinator_request_id IS NOT NULL'))
        batch_op.create_index('idx_transfer_rescheduled_for', ['rescheduled_for'], unique=False, postgresql_where=sa.text('rescheduled_for IS NOT NULL'))

    op.create_table('trigger_transfer_signal',
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('collector_id', sa.BigInteger(), nullable=False),
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('is_dispatching', sa.BOOLEAN(), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('signal_id')
    )
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trigger_transfer_signal')
    with op.batch_alter_table('transfer_attempt', schema=None) as batch_op:
        batch_op.drop_index('idx_transfer_rescheduled_for', postgresql_where=sa.text('rescheduled_for IS NOT NULL'))
        batch_op.drop_index('idx_transfer_coordinator_request_id', postgresql_where=sa.text('coordinator_request_id IS NOT NULL'))

    op.drop_table('transfer_attempt')
    op.drop_table('account_id_response_signal')
    op.drop_table('account_id_request_signal')
    # ### end Alembic commands ###


def upgrade_solver():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_solver():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

